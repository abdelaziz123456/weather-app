{"version":3,"sources":["components/Form/index.js","components/Weather/index.js","App.js","index.js"],"names":["Form","props","onSubmit","getWeather","type","placeholder","name","Weather","className","city","temperature","Number","parseFloat","toFixed","country","humidity","description","error","API_key","App","state","e","a","preventDefault","target","elements","value","fetch","api","json","data","setState","main","temp","sys","weather","this","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"gUAqCeA,MAjCf,SAAcC,GAGN,OAIQ,uBAAMC,SAAUD,EAAME,WAAtB,UAEA,8BACA,uBAAOC,KAAK,OAAOC,YAAY,UAAWC,KAAK,WAE/C,8BACA,uBAAOF,KAAK,OAAOC,YAAY,aAAaC,KAAK,cAEjD,8BACA,uD,MCaDC,MA7Bf,SAAiBN,GAET,OACI,sBAAKO,UAAU,OAAf,UAIKP,EAAMQ,MAAQ,oBAAGD,UAAU,WAAb,oBAA+B,uBAAMA,UAAU,aAAhB,cAA+BP,EAAMQ,WAGlFR,EAAMS,aAAe,oBAAGF,UAAU,WAAb,4BAAuC,uBAAMA,UAAU,aAAhB,UAA8BG,OAAOC,WAAWX,EAAMS,YAAY,KAAKG,QAAQ,GAA/E,eAK5DZ,EAAMa,SAAW,oBAAGN,UAAU,WAAb,uBAAkC,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMa,aAEvFb,EAAMc,UAAY,oBAAGP,UAAU,WAAb,wBAAmC,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMc,cAEzFd,EAAMe,aAAe,oBAAGR,UAAU,WAAb,4BAAuC,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMe,iBAEhGf,EAAMgB,OAAS,oBAAGT,UAAU,WAAb,sBAAiC,sBAAMA,UAAU,aAAhB,SAA8BP,EAAMgB,eClB/FC,G,MAAQ,oCAgECC,E,4MA5DbC,MAAM,CACJV,YAAY,GACZD,KAAK,GACLK,QAAQ,GACRC,SAAS,GACTC,YAAY,GACZC,MAAM,I,EAGRd,W,uCAAW,WAAOkB,GAAP,qBAAAC,EAAA,6DACTD,EAAEE,iBACId,EAAKY,EAAEG,OAAOC,SAAShB,KAAKiB,MAC5BZ,EAAQO,EAAEG,OAAOC,SAASX,QAAQY,MAH/B,SAIOC,MAAM,oDAAD,OAAqDlB,EAArD,YAA6DK,EAA7D,kBAA8EI,IAJ1F,cAIHU,EAJG,gBAKQA,EAAIC,OALZ,OAKHC,EALG,OAMNrB,GAAQK,EACT,EAAKiB,SAAS,CACZrB,YAAYoB,EAAKE,KAAKC,KACxBxB,KAAKqB,EAAKxB,KACVQ,QAAQgB,EAAKI,IAAIpB,QACjBC,SAASe,EAAKE,KAAKjB,SACnBC,YAAYc,EAAKK,QAAQ,GAAGnB,YAC5BC,MAAM,KAIN,EAAKc,SAAS,CACZd,MAAM,kCAIVI,EAAEG,OAAOC,SAAShB,KAAKiB,MAAM,GAC7BL,EAAEG,OAAOC,SAASX,QAAQY,MAAM,GAvBvB,4C,kGA8BX,WAGA,OACE,qBAAKlB,UAAU,UAAf,SACE,sBAAKA,UAAU,iBAAf,UACA,cAAC,EAAD,CAAML,WAAYiC,KAAKjC,aACvB,cAAC,EAAD,CACAO,YAAa0B,KAAKhB,MAAMV,YACxBD,KAAM2B,KAAKhB,MAAMX,KACjBK,QAASsB,KAAKhB,MAAMN,QACpBC,SAAUqB,KAAKhB,MAAML,SACrBC,YAAaoB,KAAKhB,MAAMJ,YACxBC,MAAOmB,KAAKhB,MAAMH,iB,GAtDNoB,aCJlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.817dfdd6.chunk.js","sourcesContent":["\r\nimport './index.css';\r\n\r\n\r\nfunction Form(props){\r\n\r\n\r\n        return (\r\n           \r\n                \r\n\r\n                <form onSubmit={props.getWeather}   >\r\n                \r\n                <div >\r\n                <input type=\"text\" placeholder='city...'  name='city'  />\r\n                </div>\r\n                <div >\r\n                <input type=\"text\" placeholder='country...' name='country' />\r\n                </div>\r\n                <div >\r\n                <button >Get Weather</button>\r\n                </div>\r\n                \r\n\r\n        </form>\r\n\r\n            \r\n            \r\n                \r\n           \r\n            \r\n        )\r\n    }\r\n\r\n\r\n\r\n\r\nexport default Form;","import { Component } from 'react';\r\nimport './index.css';\r\n\r\n\r\nfunction Weather(props){\r\n    \r\n        return (\r\n            <div className='info'>\r\n\r\n\r\n                \r\n               { props.city && <p className='info_key'> city: <span className='info_value'> {props.city}</span></p>} \r\n\r\n\r\n               { props.temperature && <p className='info_key'> temperature : <span className='info_value'>{Number.parseFloat(props.temperature-273).toFixed(0 )} &deg;C</span></p>}\r\n               \r\n\r\n\r\n\r\n               { props.country && <p className='info_key'> country :<span className='info_value'>{props.country}</span></p>} \r\n\r\n               { props.humidity && <p className='info_key'> humidity :<span className='info_value'>{props.humidity}</span></p>} \r\n\r\n               { props.description && <p className='info_key'> description : <span className='info_value'>{props.description}</span></p>}  \r\n\r\n               { props.error && <p className='info_key'> error : <span className='info_value'>{props.error}</span></p>} \r\n               \r\n            </div>\r\n        )\r\n    }\r\n\r\n\r\n\r\nexport default Weather","\nimport './App.css';\nimport { Component } from 'react';\nimport Form from './components/Form';\nimport Weather from './components/Weather';\n\nimport 'bootstrap/dist/css/bootstrap.min.css'\nconst API_key='9b5f062a40e1f0b4a86bdf4ef6308ca5'\n\nclass App extends Component {\n\n  state={\n    temperature:'',\n    city:'',\n    country:'',\n    humidity:'',\n    description:'',\n    error:''\n  }\n  \n  getWeather=async (e)=>{\n    e.preventDefault();\n    const city=e.target.elements.city.value;\n    const country=e.target.elements.country.value;\n    const api=await fetch(`http://api.openweathermap.org/data/2.5/weather?q=${city},${country}&appid=${API_key}`);\n    const data=await api.json();\n    if(city && country){\n      this.setState({\n        temperature:data.main.temp,\n      city:data.name,\n      country:data.sys.country,\n      humidity:data.main.humidity,\n      description:data.weather[0].description,\n      error:''\n      })\n\n    }else{\n      this.setState({\n        error:'please enter city and country'\n      })\n    }\n // to make input empty after submit it\n    e.target.elements.city.value='';\n    e.target.elements.country.value='';\n    \n  }\n\n\n\n\n  render(){\n\n  \n  return (\n    <div className='wrapper'>\n      <div className='form-container'>\n      <Form getWeather={this.getWeather}/>\n      <Weather\n      temperature={this.state.temperature}\n      city={this.state.city}\n      country={this.state.country}\n      humidity={this.state.humidity}\n      description={this.state.description}\n      error={this.state.error}\n      />\n    </div>\n    </div>\n  );\n}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n\n"],"sourceRoot":""}